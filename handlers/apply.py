from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    CommandHandler,
    filters,
)
from utils.storage import safe_load_json, safe_save_json
from config import JSON_APPS, ADMIN_IDS
import html

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
AGE, DEVICE, ROLE, EXPERIENCE, ROBLOX, CONFIRM = range(6)

PROFESSIONS = ["–ü–∏–ª–æ—Ç", "–î–∏—Å–ø–µ—Ç—á–µ—Ä", "–°—Ç—é–∞—Ä–¥", "–¢–µ—Ö–Ω–∏–∫", "–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", "–†–∞–±–æ—Ç–Ω–∏–∫ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞", "–ë–æ—Ä—Ç–∏–Ω–∂–µ–Ω–µ—Ä"]
DEVICES = ["–ü–ö", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ö–æ–Ω—Å–æ–ª—å"]

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø Aurora Bot!")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /apply —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.")

# --- Apply ---
async def start_apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    apps = await safe_load_json(JSON_APPS, {})
    uid = str(update.effective_user.id)
    if uid in apps and apps[uid].get("status") in ["–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–ø—Ä–∏–Ω—è—Ç–æ"]:
        keyboard = [[InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="edit")]]
        await update.message.reply_html(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ (—Å—Ç–∞—Ç—É—Å: {apps[uid]['status']})",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIRM
    await update.message.reply_text("üë∂ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (11‚Äì30):")
    return AGE

async def confirm_edit_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "edit":
        await query.edit_message_text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (11‚Äì30):")
        return AGE
    return ConversationHandler.END

async def age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text.strip())
        if not (11 <= age <= 30):
            raise ValueError
        context.user_data["age"] = age
    except Exception:
        await update.message.reply_text("üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (11‚Äì30):")
        return AGE
    keyboard = [[InlineKeyboardButton(d, callback_data=d) for d in DEVICES]]
    await update.message.reply_text("üíª –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=InlineKeyboardMarkup(keyboard))
    return DEVICE

async def device_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["device"] = query.data
    keyboard = [[InlineKeyboardButton(p, callback_data=p) for p in PROFESSIONS[i:i+2]] for i in range(0, len(PROFESSIONS), 2)]
    await query.edit_message_text("üßë‚Äçüíº –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ROLE

async def role_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["role"] = query.data
    await query.edit_message_text("‚åõ –£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 10):")
    return EXPERIENCE

async def experience_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        exp = int(update.message.text.strip())
        if exp < 10:
            raise ValueError
        context.user_data["experience"] = exp
    except Exception:
        await update.message.reply_text("üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø—ã—Ç (–º–∏–Ω. 10):")
        return EXPERIENCE
    await update.message.reply_text("üéÆ –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤ Roblox:")
    return ROBLOX

async def roblox_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nickname = html.escape(update.message.text.strip())
    context.user_data["nickname"] = nickname
    data = context.user_data
    summary = (
        f"<b>üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞:</b>\n"
        f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\nüíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data['device']}\n"
        f"üßë‚Äçüíº –†–æ–ª—å: {data['role']}\n‚åõ –û–ø—ã—Ç: {data['experience']} –º–∏–Ω\n"
        f"üéÆ –ù–∏–∫: {data['nickname']}\n‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ]
    await update.message.reply_html(summary, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM

async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    if query.data == "cancel":
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    apps = await safe_load_json(JSON_APPS, {})
    apps[uid] = {
        "nickname": context.user_data["nickname"],
        "age": context.user_data["age"],
        "device": context.user_data["device"],
        "role": context.user_data["role"],
        "experience": context.user_data["experience"],
        "status": "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    }
    await safe_save_json(JSON_APPS, apps)
    await query.edit_message_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    for admin in ADMIN_IDS:
        try:
            await context.bot.send_message(admin, f"üÜï –ó–∞—è–≤–∫–∞ –æ—Ç {apps[uid]['nickname']}: {apps[uid]}")
        except Exception:
            pass
    return ConversationHandler.END

# --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ConversationHandler ---
def build_handler():
    conv = ConversationHandler(
        entry_points=[CommandHandler("apply", start_apply)],
        states={
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_handler)],
            DEVICE: [CallbackQueryHandler(device_handler)],
            ROLE: [CallbackQueryHandler(role_handler)],
            EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, experience_handler)],
            ROBLOX: [MessageHandler(filters.TEXT & ~filters.COMMAND, roblox_handler)],
            CONFIRM: [
                CallbackQueryHandler(confirm_handler, pattern="^confirm$|^cancel$"),
                CallbackQueryHandler(confirm_edit_cb, pattern="^edit$")
            ]
        },
        fallbacks=[]
    )
    return conv
